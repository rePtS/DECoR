module;

#define TINYGLTF_IMPLEMENTATION
#define STB_IMAGE_IMPLEMENTATION
#define STB_IMAGE_WRITE_IMPLEMENTATION
#define STBI_MSC_SECURE_CRT
#include <tiny_gltf.h>

export module TinyGltf;

export namespace tinygltf
{
	class TinyGLTF;
	class Model;
	class Mesh;
	class Node;
	class NormalTextureInfo;
	class OcclusionTextureInfo;
	class Material;
	class Parameter;
	class Accessor;
	class Light;

	enum Mode {
		MODE_POINTS = TINYGLTF_MODE_POINTS,
		MODE_LINE = TINYGLTF_MODE_LINE,
		MODE_LINE_LOOP = TINYGLTF_MODE_LINE_LOOP,
		MODE_LINE_STRIP = TINYGLTF_MODE_LINE_STRIP,
		MODE_TRIANGLES = TINYGLTF_MODE_TRIANGLES,
		MODE_TRIANGLE_STRIP = TINYGLTF_MODE_TRIANGLE_STRIP,		
		MODE_TRIANGLE_FAN = TINYGLTF_MODE_TRIANGLE_FAN		
	};

	enum MathType {
		TYPE_SCALAR = TINYGLTF_TYPE_SCALAR,
		TYPE_VECTOR = TINYGLTF_TYPE_VECTOR,
		TYPE_VEC2 = TINYGLTF_TYPE_VEC2,
		TYPE_VEC3 = TINYGLTF_TYPE_VEC3,
		TYPE_VEC4 = TINYGLTF_TYPE_VEC4,
		TYPE_MATRIX = TINYGLTF_TYPE_MATRIX,
		TYPE_MAT2 = TINYGLTF_TYPE_MAT2,
		TYPE_MAT3 = TINYGLTF_TYPE_MAT3,
		TYPE_MAT4 = TINYGLTF_TYPE_MAT4
	};

	enum ComponentType {
		COMPONENT_TYPE_BYTE = TINYGLTF_COMPONENT_TYPE_BYTE,
		COMPONENT_TYPE_UNSIGNED_BYTE = TINYGLTF_COMPONENT_TYPE_UNSIGNED_BYTE,
		COMPONENT_TYPE_SHORT = TINYGLTF_COMPONENT_TYPE_SHORT,
		COMPONENT_TYPE_UNSIGNED_SHORT = TINYGLTF_COMPONENT_TYPE_UNSIGNED_SHORT,
		COMPONENT_TYPE_INT = TINYGLTF_COMPONENT_TYPE_INT,
		COMPONENT_TYPE_UNSIGNED_INT = TINYGLTF_COMPONENT_TYPE_UNSIGNED_INT,
		COMPONENT_TYPE_FLOAT = TINYGLTF_COMPONENT_TYPE_FLOAT,
		COMPONENT_TYPE_DOUBLE = TINYGLTF_COMPONENT_TYPE_DOUBLE
	};
};